--
我們現在啟動一個專案，名為 Dynamic_form_System
我們正在進行一個專案，名為 Dynamic_form_System
第一階段中，這個專案存在以下需求：
1. 技術架構需求
   * 前端：Vue 3 + TypeScript + Element Plus + Pinia
   * 後端：Node.js + Express + PostgreSQL
   * 模組化設計
2. 開發規範要求
   * 嚴格模組化原則
   * 文件自動拆分：先評估文件是否過大，每寫到超過500行就開始下一個part，區分為多個part，一次性提供。
   * 可獨立復用的組件設計
   * 如果想要加入不在需求中比較大的模塊，必須溝通確認再進行。
3. 頁面功能：
   1. 用戶頁面(RWD)：
      1. 用戶在前端有一個 RWD 的頁面，左上角根據自己用戶權限內可選擇的專案，進行搜索+單選切換的功能。
      2. 用戶可以點擊頭像，輸入帳號密碼登錄，需要獨立簡潔的登錄頁。
      3. 第一階段的導入專案：
         1. BMI計算器
         2. TDEE計算器
      4. 專案各自需要有保存用戶歷史資料的功能。
      5. 每個專案需要獨立文件夾，日後拓展只能根據專案加入文件夾，然後在配置文件夾加入該路徑，並擴展資料庫。
      6. 第一階段暫時不做的東西：
         1. 不做授權登錄的功能。
         2. 不做自行註冊的功能。
         3. 表單不做歷史版本維護。
         4. 表單不做複雜的驗證系統或單位轉換。
         5. 不做複雜的錯誤處理組件
         6. 不做深色主題支持
         7. 不做響應式斷點適配
   2. 管理者頁面(web)：
      1. 用戶管理後臺頁面，管理者可以在這裡新增、修改用戶信息（包含頭像、名稱、帳號、密碼、啟用狀態）
      2. 權限管理後臺頁面，管理者可以配置用戶訪問專案的權限。
      3. 用戶操作記錄頁面，包含用戶登錄、提交表單等記錄。
      4. 第一階段暫時不做的東西：
         1. 不做複雜的用戶群組管理功能。
         2. 管理頁面不做RWD。
         3. 管理頁面另外有固定的帳號密碼。
         4. 不做統計分析圖表。
         5. 不做個性化推薦系統。
   3. 其他第一階段注意不做的內容：
      1. 社交登錄
      2. 郵箱驗證
      3. 圖表分析
      4. 數據匯出
      5. 主題切換
      6. 國際化
      7. 支付管理
      8. 用戶等級管理

-

a. GIT 連接
git init
git remote add origin https://github.com/eleni1029/250627_Dynamic_Form_System.git

b. 把內容都拉下來
git fetch origin
git reset --hard origin/main

c. 更新到 git 上
git add .
git commit -m "常規更新"
git push -u origin main

c. 強制更新到 git 上
git add .
git commit -m "常規更新"
git push origin main --force

-
啟動 Docker
docker-compose up --build

前端依賴與運行
cd frontend
npm install
npm run dev

後端依賴與運行
cd backend
npm install
npm run dev



--
# 連接到 PostgreSQL
psql postgres

# 在 psql 中執行
CREATE DATABASE dynamic_form_system;
CREATE USER postgres WITH PASSWORD 'postgres123';
GRANT ALL PRIVILEGES ON DATABASE dynamic_form_system TO postgres;
\q